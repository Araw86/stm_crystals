{"version":3,"sources":["components/CrystalParameters.js","components/LoadCapacitance.js","components/DeviceListGM.js","components/DeviceList.js","dataFunctions/dataSearch.js","components/LSE.js","App.js","serviceWorker.js","index.js"],"names":["CrystalParameters","props","handleChange","input","e","value","Number","target","isNaN","valueToState","toFixed","setState","calculateGM","updateState","cl","state","c0","c0String","clString","esr","esrString","gmcrit","f","this","Math","pow","PI","Box","m","Card","CardHeader","title","CardContent","Typography","type","FormControl","InputLabel","htmlFor","Input","id","endAdornment","InputAdornment","position","aria-describedby","inputProps","onChange","TextField","label","InputProps","readOnly","variant","Component","LoadCapacitance","calculateCl12","cl12","cs","csString","prevProps","prevState","subheader","DeviceListGM","console","log","titleString","subTitleString","boxColor","icon","bgColor","classes","gmOK","gmCompare","gmValueObj","elementValue","elementName","yellow_bg","yellow","Warning","green_bg","green","Done","red_bg","red","Close","className","avatar","Avatar","aria-label","withStyles","theme","color","backgroundColor","DeviceList","deviceSelected","handleSelect","bind","deviceList","dbList","elements","menuItems","push","MenuItem","key","length","forEach","element","elementUID","compareGM","deviceGM","dbObject","uid","dbObjectsArray","filter","obj","dbSearch","objectsRefferenceTo","refferenceList","onlyWanted","elementRefferedTo","listName","undefined","find","style","minWidth","Select","labelId","LSE","AppBar","Toolbar","createMuiTheme","palette","primary","blue","secondary","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6dfa0e85.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport {\r\n  TextField,\r\n  Box,\r\n  FormControl,\r\n  InputAdornment,\r\n  Input,\r\n  InputLabel,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography\r\n} from '@material-ui/core';\r\n\r\nexport class CrystalParameters extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      c0: 0.0,\r\n      c0String: '',\r\n      cl: 0.0,\r\n      clString: '',\r\n      esr: 0,\r\n      esrString: '',\r\n      gmcrit: 0.0,\r\n      f: 32768\r\n    };\r\n  }\r\n  calculateGM() {\r\n    const { c0, cl, esr, f } = this.state;\r\n    let gmcrit =\r\n      4 *\r\n      esr *\r\n      1e3 *\r\n      Math.pow(2 * Math.PI * f, 2) *\r\n      Math.pow((cl + c0) * 1e-12, 2) *\r\n      1e6;\r\n    gmcrit = Number(gmcrit.toFixed(4));\r\n    this.setState({ gmcrit: gmcrit });\r\n    this.props.updateState({ gmcrit: gmcrit });\r\n  }\r\n\r\n  handleChange = input => e => {\r\n    const value = Number(e.target.value);\r\n\r\n    if (!isNaN(value)) {\r\n      const valueToState = Number(value.toFixed(2));\r\n      this.setState(\r\n        { [input]: valueToState, [input + 'String']: e.target.value },\r\n        () => {\r\n          this.calculateGM();\r\n        }\r\n      );\r\n      if (input === 'cl') {\r\n        this.props.updateState({ cl: valueToState });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box m={1}>\r\n        <Card>\r\n          <CardHeader title=\"LSE crystal parameters\" />\r\n          <CardContent>\r\n            <Typography type=\"p\">\r\n              Please fill the Loading capacitance of cystal and C<sub>0</sub>{' '}\r\n              capacitance. This values are written in the Datasheet to related\r\n              crystall. Values will be used to calculate compatybility with\r\n              STM32 device\r\n            </Typography>\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-c0-helper-text\">\r\n                C<sub>0</sub> capacitance\r\n              </InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-c0\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">pF</InputAdornment>\r\n                }\r\n                aria-describedby=\"standard-c0-helper-text\"\r\n                inputProps={{\r\n                  'aria-label': 'C0 capacitance'\r\n                }}\r\n                onChange={this.handleChange('c0')}\r\n                value={this.state.c0String}\r\n              />\r\n              {/* <FormHelperText id=\"standard-c0-helper-text\">Enter valid nunber</FormHelperText> */}\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-cl-helper-text\">\r\n                C<sub>L</sub> capacitance\r\n              </InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-cl\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">pF</InputAdornment>\r\n                }\r\n                aria-describedby=\"standard-cl-helper-text\"\r\n                inputProps={{\r\n                  'aria-label': 'Cl capacitance'\r\n                }}\r\n                onChange={this.handleChange('cl')}\r\n                value={this.state.clString}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-esr-helper-text\">ESR</InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-esr\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">k&Omega;</InputAdornment>\r\n                }\r\n                aria-describedby=\"standard-esr-helper-text\"\r\n                inputProps={{\r\n                  'aria-label': 'ESR'\r\n                }}\r\n                onChange={this.handleChange('esr')}\r\n                value={this.state.esrString}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              label={\r\n                <Fragment>\r\n                  g<sub>mcrit</sub>\r\n                </Fragment>\r\n              }\r\n              id=\"standard-adornment-gmcrit\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">&mu;A/V</InputAdornment>\r\n                ),\r\n                readOnly: true\r\n              }}\r\n              value={this.state.gmcrit}\r\n              variant=\"outlined\"\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CrystalParameters;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  TextField,\r\n  Box,\r\n  FormControl,\r\n  InputAdornment,\r\n  Input,\r\n  InputLabel,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography\r\n} from \"@material-ui/core\";\r\n\r\nexport class LoadCapacitance extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cl: props.cl,\r\n      cl12: 0.0,\r\n      cs: 0,\r\n      csString: \"0\"\r\n    };\r\n  }\r\n\r\n  calculateCl12() {\r\n    const cs = this.state.cs;\r\n    const cl = this.props.cl;\r\n    let cl12 = (cl - cs) * 2;\r\n    if (cl12 !== this.state.cl12) {\r\n      this.setState({ cl12: cl12 });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.cl !== this.props.cl) {\r\n      this.calculateCl12();\r\n    }\r\n  }\r\n\r\n  handleChange = input => e => {\r\n    const value = Number(e.target.value);\r\n    // console.log(e.target.value);\r\n    // console.log(value);\r\n    // console.log(isNaN(value));\r\n    if (!isNaN(value)) {\r\n      // if (typeof value == 'number') {\r\n      const valueToState = Number(value.toFixed(2));\r\n      // console.log(valueToState);\r\n      this.setState(\r\n        { [input]: valueToState, [input + \"String\"]: e.target.value },\r\n        () => {\r\n          this.calculateCl12();\r\n        }\r\n      );\r\n      // this.calculateGM();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box m={1}>\r\n        <Card>\r\n          <CardHeader\r\n            title=\"LSE Load capacitance\"\r\n            subheader=\"sub header test\"\r\n          />\r\n          <CardContent>\r\n            <Typography type=\"p\">\r\n              This part is calculating the Load capacitance C<sub>L1</sub> & C\r\n              <sub>L2</sub> which must be added toi your crystal. For this\r\n              calculation is used Crystal load capacitance C<sub>L</sub> and\r\n              stray capacitance C<sub>s</sub>.\r\n            </Typography>\r\n            <Typography>\r\n              The stray capacitance is based on the PCB capacitance, STM32\r\n              capacitance and soldering capacitance. So the value is only\r\n              estimation. Best aproach is to use C<sub>L1</sub> & C<sub>L2</sub>{\" \"}\r\n              calculated value. Measure the LSE frequency over MCO. And then\r\n              compensate the offset by changing C<sub>L1</sub> & C<sub>L2</sub>.\r\n            </Typography>\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-Cs-helper-text\">\r\n                C<sub>s</sub>\r\n              </InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-cs\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">pF</InputAdornment>\r\n                }\r\n                aria-describedby=\"standard-cs-helper-text\"\r\n                inputProps={{\r\n                  \"aria-label\": \"CS\"\r\n                }}\r\n                onChange={this.handleChange(\"cs\")}\r\n                value={this.state.csString}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              label={\r\n                <Fragment>\r\n                  C<sub>L1</sub> & C<sub>L2</sub>\r\n                </Fragment>\r\n              }\r\n              id=\"standard-adornment-cl12\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">pF</InputAdornment>\r\n                ),\r\n                readOnly: true\r\n              }}\r\n              value={this.state.cl12}\r\n              variant=\"outlined\"\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadCapacitance;\r\n","import React, { Component } from 'react';\r\nimport { Box, Card, CardHeader, Typography, Avatar } from '@material-ui/core';\r\nimport { green, red, yellow } from '@material-ui/core/colors';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Done, Close, Warning } from '@material-ui/icons';\r\n\r\nconst useStyles = theme => ({\r\n  red: {\r\n    color: '#fff',\r\n    backgroundColor: red[500]\r\n  },\r\n  red_bg: {\r\n    backgroundColor: red[50]\r\n  },\r\n  green: {\r\n    color: '#fff',\r\n    backgroundColor: green[500]\r\n  },\r\n  green_bg: {\r\n    backgroundColor: green[50]\r\n  },\r\n  yellow: {\r\n    color: '#000',\r\n    backgroundColor: yellow[500]\r\n  },\r\n  yellow_bg: {\r\n    backgroundColor: yellow[50]\r\n  }\r\n});\r\n\r\nexport class DeviceListGM extends Component {\r\n  render() {\r\n    console.log(this.props);\r\n    const classes = this.props.classes;\r\n    const gmOK = this.props.gmCompare < this.props.gmValueObj.elementValue;\r\n    let titleString;\r\n    let subTitleString;\r\n    let boxColor;\r\n    let icon;\r\n    let bgColor;\r\n    titleString = (\r\n      <Typography>\r\n        <b>\r\n          {this.props.gmValueObj.elementName} gm<sub>crit max</sub>=\r\n          {this.props.gmValueObj.elementValue}\r\n        </b>\r\n      </Typography>\r\n    );\r\n    if (this.props.gmValueObj.elementValue > 3) {\r\n      subTitleString = (\r\n        <Typography>\r\n          This value have too big gain margin and not work with crystals.{' '}\r\n          <b>It is set by default</b> be sure that you are using smaller Drive\r\n          Mode.\r\n        </Typography>\r\n      );\r\n      bgColor = classes.yellow_bg;\r\n      boxColor = classes.yellow;\r\n      icon = <Warning />;\r\n    } else if (gmOK) {\r\n      subTitleString = (\r\n        <Typography>\r\n          LSE gm<sub>crit</sub> &lt; STM32 gm<sub>critmax</sub>\r\n        </Typography>\r\n      );\r\n      bgColor = classes.green_bg;\r\n      boxColor = classes.green;\r\n      icon = <Done />;\r\n    } else {\r\n      subTitleString = (\r\n        <Typography>\r\n          LSE gm<sub>crit</sub> &gt;= STM32 gm<sub>critmax</sub>\r\n        </Typography>\r\n      );\r\n      bgColor = classes.red_bg;\r\n      boxColor = classes.red;\r\n      icon = <Close />;\r\n    }\r\n    return (\r\n      <Box m={1} /*className={classes.root}*/>\r\n        <Card className={bgColor}>\r\n          <CardHeader\r\n            avatar={\r\n              <Avatar aria-label=\"recipe\" className={boxColor}>\r\n                {icon}\r\n              </Avatar>\r\n            }\r\n            title={titleString}\r\n            subheader={subTitleString}\r\n          />\r\n        </Card>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(DeviceListGM);\r\n","import React, { Component, Fragment } from 'react';\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography\r\n} from '@material-ui/core';\r\n\r\nimport dbList from '../data/stm32_gm2.json';\r\nimport DeviceListGM from './DeviceListGM';\r\nimport * as dbSearch from '../dataFunctions/dataSearch';\r\nexport class DeviceList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      deviceSelected: ''\r\n    };\r\n    this.handleSelect = this.handleSelect.bind(this);\r\n  }\r\n  handleSelect(e) {\r\n    this.setState({ deviceSelected: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    /* prepare select items */\r\n\r\n    const deviceList = dbList['dbList']['gmFamilyList'].elements;\r\n    let menuItems = [];\r\n    menuItems.push(\r\n      <MenuItem key=\"none\" value=\"\">\r\n        <em>None</em>\r\n      </MenuItem>\r\n    );\r\n    if (deviceList.length === 0) {\r\n      /*no items to render */\r\n      console.log('Check the jsoin surce no devices to show');\r\n    } else {\r\n      deviceList.forEach(element => {\r\n        menuItems.push(\r\n          <MenuItem key={element.elementUID} value={element.elementUID}>\r\n            {element.elementName}\r\n          </MenuItem>\r\n        );\r\n      });\r\n    }\r\n    let compareGM = [];\r\n    if (this.state.deviceSelected !== '') {\r\n      const deviceGM = dbSearch.getDataByUID(\r\n        dbList['dbList'],\r\n        'gmFamilyList',\r\n        this.state.deviceSelected\r\n      );\r\n      console.log(deviceGM);\r\n      const deviceGMs = dbSearch.getReferenceArray(\r\n        dbList['dbList'],\r\n        deviceGM,\r\n        'gmTypes'\r\n      );\r\n      deviceGMs.forEach(element => {\r\n        compareGM.push(\r\n          <DeviceListGM\r\n            key={element.elementUID}\r\n            gmValueObj={element}\r\n            gmCompare={this.props.gmcrit}\r\n          />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <Box m={1}>\r\n        <Card>\r\n          <CardHeader title=\"Check if STM32 can work with crystal\" />\r\n          <CardContent>\r\n            <FormControl style={{ minWidth: 240 }}>\r\n              <InputLabel id=\"simple-select-device-label\">\r\n                Select Device Family\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"simple-select-device-label\"\r\n                id=\"simple-select-device\"\r\n                value={this.state.deviceSelected}\r\n                onChange={this.handleSelect}\r\n              >\r\n                {menuItems}\r\n              </Select>\r\n            </FormControl>\r\n            <Box m={1}>{compareGM}</Box>\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeviceList;\r\n","export function getDataByUID(dbObject, dbList, uid) {\r\n  const dbObjectsArray = dbObject[dbList].elements.filter(obj => {\r\n    return obj.elementUID === uid;\r\n  });\r\n  if (dbObjectsArray.length > 1 || dbObjectsArray.length === 0) {\r\n    return -1;\r\n  }\r\n  return dbObjectsArray[0];\r\n}\r\n\r\nexport function getReferenceArray(\r\n  dbObject,\r\n  objectsRefferenceTo,\r\n  refferenceList\r\n) {\r\n  const onlyWanted = objectsRefferenceTo.elementRefferedTo.filter(obj => {\r\n    return obj.listName === refferenceList;\r\n  });\r\n  if (onlyWanted.length === 0) {\r\n    return -1;\r\n  }\r\n  return dbObject[refferenceList].elements.filter(obj => {\r\n    const found = onlyWanted.find(element => {\r\n      return element.elementUID === obj.elementUID;\r\n    });\r\n    return found !== undefined;\r\n  });\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Typography, Toolbar, AppBar, Box } from \"@material-ui/core\";\r\n\r\nimport CrystalParameters from \"./CrystalParameters\";\r\nimport LoadCapacitance from \"./LoadCapacitance\";\r\nimport DeviceList from \"./DeviceList\";\r\n\r\nexport class LSE extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cl: 0,\r\n      gmcrit: 0\r\n    };\r\n    this.updateState = this.updateState.bind(this);\r\n  }\r\n  updateState(input) {\r\n    this.setState(input);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <AppBar position=\"static\">\r\n            <Toolbar>\r\n              <Typography variant=\"h6\">STM Crystal calculation</Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </header>\r\n        <Box>\r\n          <CrystalParameters updateState={this.updateState} />\r\n        </Box>\r\n        <Box>\r\n          <DeviceList gmcrit={this.state.gmcrit} />\r\n        </Box>\r\n        <Box>\r\n          <LoadCapacitance cl={this.state.cl} />\r\n        </Box>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LSE;\r\n","import React from \"react\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nimport blue from \"@material-ui/core/colors/blue\";\nimport green from \"@material-ui/core/colors/green\";\n\nimport LSE from \"./components/LSE\";\n\nconst theme = createMuiTheme({\n  // typography: {\n  //   button: {\n  //     fontStyle: 'italic'\n  //   }\n  // }\n  palette: {\n    primary: blue,\n    secondary: green\n  }\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <LSE />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}