{"version":3,"sources":["components/CrystalParameters.js","components/LoadCapacitance.js","components/LSE.js","App.js","serviceWorker.js","index.js"],"names":["CrystalParameters","props","handleChange","input","e","value","Number","target","isNaN","valueToState","toFixed","setState","calculateGM","updateState","cl","state","c0","c0String","clString","esr","esrString","gmcrit","f","this","Math","pow","PI","Box","m","Card","CardHeader","title","subheader","CardContent","Typography","type","FormControl","InputLabel","htmlFor","Input","id","endAdornment","InputAdornment","position","aria-describedby","inputProps","onChange","TextField","label","InputProps","readOnly","Component","LoadCapacitance","calculateCl12","cl12","cs","csString","prevProps","prevState","LSE","bind","className","AppBar","Toolbar","variant","theme","createMuiTheme","palette","primary","blue","secondary","green","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e46ed59d.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  TextField,\r\n  Box,\r\n  FormControl,\r\n  InputAdornment,\r\n  Input,\r\n  InputLabel,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography,\r\n  FormHelperText,\r\n  FormLabel\r\n} from \"@material-ui/core\";\r\nimport { typography } from \"@material-ui/system\";\r\n\r\nexport class CrystalParameters extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      c0: 0.0,\r\n      c0String: \"\",\r\n      cl: 0.0,\r\n      clString: \"\",\r\n      esr: 0,\r\n      esrString: \"\",\r\n      gmcrit: 0.0,\r\n      f: 32768\r\n    };\r\n  }\r\n  calculateGM() {\r\n    const { c0, cl, esr, f } = this.state;\r\n    let gmcrit =\r\n      4 *\r\n      esr *\r\n      1e3 *\r\n      Math.pow(2 * Math.PI * f, 2) *\r\n      Math.pow((cl + c0) * 1e-12, 2) *\r\n      1e6;\r\n    gmcrit = Number(gmcrit.toFixed(4));\r\n    this.setState({ gmcrit: gmcrit });\r\n  }\r\n\r\n  // handleInputChange = e => {\r\n  //   console.log(e);\r\n  //   console.log(e.target.value);\r\n  // }\r\n\r\n  handleChange = input => e => {\r\n    const value = Number(e.target.value);\r\n    // console.log(e.target.value);\r\n    // console.log(value);\r\n    // console.log(isNaN(value));\r\n    if (!isNaN(value)) {\r\n      // if (typeof value == 'number') {\r\n      const valueToState = Number(value.toFixed(2));\r\n      // console.log(valueToState);\r\n      this.setState(\r\n        { [input]: valueToState, [input + \"String\"]: e.target.value },\r\n        () => {\r\n          this.calculateGM();\r\n        }\r\n      );\r\n      if (input === \"cl\") {\r\n        this.props.updateState({ cl: valueToState });\r\n      }\r\n      // this.calculateGM();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box m={1}>\r\n        <Card>\r\n          <CardHeader\r\n            title=\"LSE crystal parameters\"\r\n            subheader=\"sub header test\"\r\n          />\r\n          <CardContent>\r\n            <Typography type=\"p\">\r\n              Please fill the Loading capacitance of cystal and C<sub>0</sub>{\" \"}\r\n              capacitance. This values are written in the Datasheet to related\r\n              crystall. Values will be used to calculate compatybility with\r\n              STM32 device\r\n            </Typography>\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-c0-helper-text\">\r\n                C<sub>0</sub> capacitance\r\n              </InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-c0\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">pF</InputAdornment>\r\n                }\r\n                aria-describedby=\"standard-c0-helper-text\"\r\n                inputProps={{\r\n                  \"aria-label\": \"C0 capacitance\"\r\n                }}\r\n                onChange={this.handleChange(\"c0\")}\r\n                value={this.state.c0String}\r\n              />\r\n              {/* <FormHelperText id=\"standard-c0-helper-text\">Enter valid nunber</FormHelperText> */}\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-cl-helper-text\">\r\n                C<sub>L</sub> capacitance\r\n              </InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-cl\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">pF</InputAdornment>\r\n                }\r\n                aria-describedby=\"standard-cl-helper-text\"\r\n                inputProps={{\r\n                  \"aria-label\": \"Cl capacitance\"\r\n                }}\r\n                onChange={this.handleChange(\"cl\")}\r\n                value={this.state.clString}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-esr-helper-text\">ESR</InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-esr\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">k&Omega;</InputAdornment>\r\n                }\r\n                aria-describedby=\"standard-esr-helper-text\"\r\n                inputProps={{\r\n                  \"aria-label\": \"ESR\"\r\n                }}\r\n                onChange={this.handleChange(\"esr\")}\r\n                value={this.state.esrString}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              label={\r\n                <Fragment>\r\n                  g<sub>mcrit</sub>\r\n                </Fragment>\r\n              }\r\n              id=\"standard-adornment-gmcrit\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">&mu;A/V</InputAdornment>\r\n                ),\r\n                readOnly: true\r\n              }}\r\n              value={this.state.gmcrit}\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CrystalParameters;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  TextField,\r\n  Box,\r\n  FormControl,\r\n  InputAdornment,\r\n  Input,\r\n  InputLabel,\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  Typography\r\n} from \"@material-ui/core\";\r\n\r\nexport class LoadCapacitance extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cl: props.cl,\r\n      cl12: 0.0,\r\n      cs: 0,\r\n      csString: \"\"\r\n    };\r\n  }\r\n\r\n  calculateCl12() {\r\n    const cs = this.state.cs;\r\n    const cl = this.props.cl;\r\n    let cl12 = (cl - cs) * 2;\r\n    if (cl12 != this.state.cl12) {\r\n      this.setState({ cl12: cl12 });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.cl !== this.props.cl) {\r\n      this.calculateCl12();\r\n    }\r\n  }\r\n\r\n  handleChange = input => e => {\r\n    const value = Number(e.target.value);\r\n    // console.log(e.target.value);\r\n    // console.log(value);\r\n    // console.log(isNaN(value));\r\n    if (!isNaN(value)) {\r\n      // if (typeof value == 'number') {\r\n      const valueToState = Number(value.toFixed(2));\r\n      // console.log(valueToState);\r\n      this.setState(\r\n        { [input]: valueToState, [input + \"String\"]: e.target.value },\r\n        () => {\r\n          this.calculateCl12();\r\n        }\r\n      );\r\n      // this.calculateGM();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Box m={1}>\r\n        <Card>\r\n          <CardHeader\r\n            title=\"LSE Load capacitance\"\r\n            subheader=\"sub header test\"\r\n          />\r\n          <CardContent>\r\n            <Typography type=\"p\">\r\n              This part is calculating the Load capacitance C<sub>L1</sub> & C\r\n              <sub>L2</sub> which must be added toi your crystal. For this\r\n              calculation is used Crystal load capacitance C<sub>L</sub> and\r\n              stray capacitance C<sub>s</sub>.\r\n            </Typography>\r\n            <Typography>\r\n              The stray capacitance is based on the PCB capacitance, STM32\r\n              capacitance and soldering capacitance. So the value is only\r\n              estimation. Best aproach is to use C<sub>L1</sub> & C<sub>L2</sub>{\" \"}\r\n              calculated value. Measure the LSE frequency over MCO. And then\r\n              compensate the offset by changing C<sub>L1</sub> & C<sub>L2</sub>.\r\n            </Typography>\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-Cs-helper-text\">\r\n                C<sub>s</sub>\r\n              </InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-cs\"\r\n                endAdornment={\r\n                  <InputAdornment position=\"end\">pF</InputAdornment>\r\n                }\r\n                aria-describedby=\"standard-cs-helper-text\"\r\n                inputProps={{\r\n                  \"aria-label\": \"CS\"\r\n                }}\r\n                onChange={this.handleChange(\"cs\")}\r\n                value={this.state.csString}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              label={\r\n                <Fragment>\r\n                  C<sub>S</sub>\r\n                </Fragment>\r\n              }\r\n              id=\"standard-adornment-cl12\"\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">pF</InputAdornment>\r\n                ),\r\n                readOnly: true\r\n              }}\r\n              value={this.state.cl12}\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoadCapacitance;\r\n","import React, { Component } from \"react\";\r\nimport { Typography, Toolbar, AppBar, Box } from \"@material-ui/core\";\r\n\r\nimport CrystalParameters from \"./CrystalParameters\";\r\nimport LoadCapacitance from \"./LoadCapacitance\";\r\n\r\nexport class LSE extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cl: 0\r\n    };\r\n    this.updateState = this.updateState.bind(this);\r\n  }\r\n  updateState(input) {\r\n    this.setState(input);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <AppBar position=\"static\">\r\n            <Toolbar>\r\n              <Typography variant=\"h6\">STM Crystal calculation</Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </header>\r\n        <Box>\r\n          <CrystalParameters updateState={this.updateState} />\r\n        </Box>\r\n        <Box>\r\n          <LoadCapacitance cl={this.state.cl} />\r\n        </Box>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LSE;\r\n","import React from \"react\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nimport blue from \"@material-ui/core/colors/blue\";\nimport green from \"@material-ui/core/colors/green\";\n\nimport LSE from \"./components/LSE\";\n\nconst theme = createMuiTheme({\n  // typography: {\n  //   button: {\n  //     fontStyle: 'italic'\n  //   }\n  // }\n  palette: {\n    primary: blue,\n    secondary: green\n  }\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <LSE />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}