{"version":3,"sources":["components/CrystalParameters.js","App.js","serviceWorker.js","index.js"],"names":["CrystalParameters","props","handleChange","input","e","value","Number","target","console","log","isNaN","setState","calculateGM","state","c0","cl","esr","gmcrit","f","this","Math","pow","PI","toFixed","Box","m","Card","CardHeader","title","subheader","CardContent","Typography","type","FormControl","InputLabel","htmlFor","Input","id","endAdornment","InputAdornment","position","aria-describedby","inputProps","onChange","TextField","label","InputProps","readOnly","Component","theme","createMuiTheme","palette","primary","blue","secondary","green","App","ThemeProvider","className","AppBar","Toolbar","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20b48d4f.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { TextField, Box, FormControl, InputAdornment, Input, InputLabel, Card, CardHeader, CardContent, Typography, FormHelperText, FormLabel } from '@material-ui/core';\r\nimport { typography } from '@material-ui/system';\r\n\r\nexport class CrystalParameters extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      c0: 0.0,\r\n      cl: 0.0,\r\n      esr: 0,\r\n      gmcrit: 0.0,\r\n      f: 32768,\r\n    };\r\n  }\r\n  calculateGM() {\r\n    let { c0, cl, esr, f } = this.state;\r\n    let gmcrit = 4 * esr * 1e3 * Math.pow((2 * Math.PI * f), 2) * Math.pow(((cl + c0) * 1e-12), 2)*1e6;\r\n    gmcrit = Number(gmcrit.toFixed(4));\r\n    this.setState({ gmcrit: gmcrit });\r\n  }\r\n\r\n  // handleInputChange = e => {\r\n  //   console.log(e);\r\n  //   console.log(e.target.value);\r\n  // }\r\n\r\n  handleChange = input => e => {\r\n    const value = Number(e.target.value);\r\n    console.log(value);\r\n    console.log(isNaN(value));\r\n    if (!isNaN(value)) {\r\n      // if (typeof value == 'number') {\r\n      this.setState({ [input]: value }, ()=>{\r\n        this.calculateGM();\r\n      });\r\n      // this.calculateGM();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box m={1}>\r\n        <Card>\r\n          <CardHeader\r\n            title=\"LSE crystal parameters\"\r\n            subheader=\"sub header test\"\r\n          />\r\n          <CardContent>\r\n            <Typography type='p'>\r\n              Please fill the Loading capacitance of cystal and C<sub>0</sub> capacitance. This values are written in the Datasheet to related crystall.\r\n              Values will be used to calculate compatybility with STM32 device\r\n          </Typography>\r\n            <br />\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"standard-c0-helper-text\">C<sub>0</sub> capacitance</InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-c0\"\r\n                endAdornment={<InputAdornment position=\"end\">pF</InputAdornment>}\r\n                aria-describedby=\"standard-c0-helper-text\"\r\n                inputProps={{\r\n                  'aria-label': 'C0 capacitance',\r\n                }}\r\n                onChange={this.handleChange('c0')}\r\n                value={this.state.c0}\r\n              />\r\n              {/* <FormHelperText id=\"standard-c0-helper-text\">Enter valid nunber</FormHelperText> */}\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <FormControl >\r\n              <InputLabel htmlFor=\"standard-cl-helper-text\">C<sub>L</sub> capacitance</InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-cl\"\r\n                endAdornment={<InputAdornment position=\"end\">pF</InputAdornment>}\r\n                aria-describedby=\"standard-cl-helper-text\"\r\n                inputProps={{\r\n                  'aria-label': 'Cl capacitance',\r\n                }}\r\n                onChange={this.handleChange('cl')}\r\n                value={this.state.cl}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <FormControl >\r\n              <InputLabel htmlFor=\"standard-esr-helper-text\">ESR</InputLabel>\r\n              <Input\r\n                id=\"standard-adornment-esr\"\r\n                endAdornment={<InputAdornment position=\"end\">k&Omega;</InputAdornment>}\r\n                aria-describedby=\"standard-esr-helper-text\"\r\n                inputProps={{\r\n                  'aria-label': 'ESR',\r\n                }}\r\n                onChange={this.handleChange('esr')}\r\n                value={this.state.esr}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <br />\r\n            <TextField\r\n              label={<Fragment>g<sub>mcrit</sub></Fragment>}\r\n              id=\"standard-adornment-gmcrit\"\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"end\">&mu;A/V</InputAdornment>,\r\n                readOnly: true\r\n              }}\r\n              value={this.state.gmcrit}\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n      </Box>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CrystalParameters;\r\n","import React from 'react';\nimport { Typography, Toolbar, AppBar ,Box} from '@material-ui/core';\nimport {ThemeProvider, createMuiTheme} from  '@material-ui/core/styles';\n\nimport blue from '@material-ui/core/colors/blue';\nimport green from '@material-ui/core/colors/green';\n\nimport CrystalParameters from './components/CrystalParameters';\nimport './App.css';\n\nconst theme = createMuiTheme({\n  // typography: {\n  //   button: {\n  //     fontStyle: 'italic'\n  //   }\n  // }\n  palette: {\n    primary: blue,\n    secondary: green,\n  }\n});\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\">\n                STM Crystal calculation\n            </Typography>\n            </Toolbar>\n          </AppBar>\n        </header>\n        <Box>\n          <CrystalParameters />\n        </Box>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}